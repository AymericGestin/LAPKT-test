(define (domain disnet)
  (:requirements :typing :equality :fluents :conditional-effects)
  (:types
    primary secondary - substation)
  (:predicates
    (available ?x - substation)
    (full ?x - substation)    
    (open_line ?dirdep - substation ?dirarr - substation)
    (closed ?x - substation ?y - substation)
    (connected ?x - substation ?y - substation)
    (buildable ?x - substation ?y - substation)
    (mutable ?x - substation)
    (removed ?x - substation ?y - substation)
    (feed ?x - substation ?y - substation)
    (is-primary ?x - substation)
  ) 

   (:action change_switch_connection
    :parameters (?s1 - secondary ?s2 - substation ?s3 - substation)
    :precondition (and 
        (open_line ?s1 ?s2)
        (closed ?s1 ?s3)
        (not(feed ?s3 ?s1))
        (feed ?s1 ?s3)
        (not(= ?s1 ?s2))       
        (not(= ?s1 ?s3))
        (not(= ?s2 ?s3))       
        )
    :effect (and (not(open_line ?s1 ?s2))
        (not(open_line ?s2 ?s1))
        (not (closed ?s1 ?s3))
        (not (closed ?s3 ?s1))
        (not(feed ?s1 ?s3))
        (feed ?s1 ?s2)
        (open_line ?s1 ?s3)
        (open_line ?s3 ?s1)
        (closed ?s1 ?s2)
        (closed ?s2 ?s1)))

  (:action add_openLine
    :parameters (?s1 - substation ?s2 - substation)
    :precondition (and
        (or (available ?s1)
            (is-primary ?s1))
        (or (available ?s2)
            (is-primary ?s2))
        (buildable ?s1 ?s2)
        (mutable ?s1) 
        (mutable ?s2)
        (not(and(is-primary ?s1)
            (is-primary ?s2))
        )
        (not(= ?s1 ?s2)))
    :effect (and 
        (not(buildable ?s1 ?s2))
        (not(buildable ?s2 ?s1))
        (not(available ?s1))
        (not(available ?s2))
        (when
        ;Antecedent
        (not(is-primary ?s1))
        ;Consequence
        (and (full ?s1))
        )
        (when
        ;Antecedent
        (not(is-primary ?s2))
        ;Consequence
        (and (full ?s2))
        )
        (open_line ?s1 ?s2)
        (open_line ?s2 ?s1)
        (connected ?s1 ?s2)
        (connected ?s2 ?s1)
        ))

  (:action remove_add_openLine
    :parameters (?s1 - secondary ?s2 - secondary ?s3 - substation)
    :precondition (and 
        (open_line ?s1 ?s2)
        (full ?s1)
        (or (available ?s3)
            (is-primary ?s3))
        (mutable ?s1)
        (mutable ?s2)
        (mutable ?s3)
        (buildable ?s2 ?s3)
        (not(= ?s1 ?s2))       
        (not(= ?s1 ?s3))
        (not(= ?s2 ?s3))
        )
    :effect (and (not(open_line ?s1 ?s2))
        (not(open_line ?s2 ?s1))
        (not(connected ?s1 ?s2))
        (not(connected ?s2 ?s1))
        (not(buildable ?s2 ?s3))
        (not(buildable ?s3 ?s2))
        (not(available ?s3))
        (not(full ?s1))
        (available ?s1)
        (full ?s3)
        (open_line ?s2 ?s3)
        (open_line ?s3 ?s2)
        (connected ?s2 ?s3)
        (connected ?s3 ?s2)
        (removed ?s1 ?s2)
        (removed ?s2 ?s1)
        ))

(:action remove_openLine
    :parameters (?s1 - substation ?s2 - substation)
    :precondition (and 
        (open_line ?s1 ?s2)
        (or (full ?s1)
            (is-primary ?s1))
        (or (full ?s2)
            (is-primary ?s2))
        (mutable ?s1)
        (mutable ?s2)
        )
    :effect (and (not(open_line ?s1 ?s2))
        (not(open_line ?s2 ?s1))
        (not(connected ?s1 ?s2))
        (not(connected ?s2 ?s1))
        (not(full ?s1))
        (not(full ?s2))
        (available ?s1)
        (available ?s2)
        (removed ?s1 ?s2)
        (removed ?s2 ?s1)
        ))
 )